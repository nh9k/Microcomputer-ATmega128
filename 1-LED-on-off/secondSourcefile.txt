#include <avr/io.h> //AVR 기본 입출력 관련 헤더파일 
#include <avr/interrupt.h> // 인터럽트 관련 헤더파일

#define S0 PD0 // S는 Switch, PD0 핀을 풀업 저항이 달린 스위치로 사용 

#define D0 PB0 // D는 Diode, PB0 핀을 330옴 저항이 달린 LED로 사용
#define D1 PB1
#define D2 PB2
#define D3 PB3
#define D4 PB4

volatile int state = 0; // 인터럽트 사용을 위한 Volatile 변수 

ISR(INT0_vect) //Interrupt Service Routine: 인터럽트가 호출되었을 시 실행되는 루틴
{	
	state++; //state로 어떤 LED를 켤지 결정
	if(state>3) state=1; //state가 3이상이면 다시 1로  SET
}

void INIT_PORT(void) //PORT 초기화 함수
{
 DDRB = 1<<D0 | 1<<D1 | 1<<D2 | 1<<D3 | 1<<D4; //PORT B의 0~4번 PIN을 다이오드로 사용하기 위한 출력으로 설정

 DDRD = 0<<S0; //PORT D를 인터럽트를 사용한 스위치로, PD0 PIN을 입력으로 설정
 PORTD = 1<<S0; // PD0 PIN의 풀업 저항 사용
}	

void INIT_INT0(void) //인터럽트 초기화 함수
{
	EIMSK |= (1<<INT0); //INT0 사용, 인터럽트 마스크 레지스터 : 인터럽트 활성화
	EICRA |= (1<<ISC01); //인터럽트 컨트롤 레지스터 : 하강 엣지에서 인터럽트 발생
	sei(); // 전역적으로 인터럽트 허용, SREG |= 0x80;
}

int main(void) //main함수. void는 parameters(매개변수)가 갖지않음을 의미
{
	INIT_PORT(); //포트 설정
	INIT_INT0(); //INT0 인터럽트 설정

	while(1){

	 	if(state==1){
	    	     PORTB &=~(1<<D3 | 1<<D4); // 4, 5번째 LED 끄기	
		     PORTB |= 1<<D0 | 1<<D1; // 1, 2번째 LED 켜기
		}
		else if(state==2){
		     PORTB &=~(1<<D0 | 1<<D1); // 1, 2번째 LED 끄기	
		     PORTB |= 1<<D2; // 3번째 LED 켜기
		}
		else {
	    	     PORTB &=~(1<<D2); //3번째 LED 끄기
	                     PORTB |= 1<<D3 | 1<<D4; // 4, 5번째 LED 켜기
		}
	}			 
	return 0; // main함수가 int형이기 때문에 0을 반환하면서 종료
}